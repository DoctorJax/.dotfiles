;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; variables

(include "notifications.yuck")

(defpoll clock_time :interval "1s" "date '+%r'")
(defpoll clock_date :interval "1h" "date '+%a %b %d'")
(defpoll calendar_day :interval "2h" "date '+%d'")
(defpoll calendar_year :interval "2h" "date '+%Y'")
(defpoll music :interval "2s" "mpc -f '%artist% - %title%' | head -n1 | grep '-'")
(defpoll barplaypause :interval "1s" "if [[ $(mpc | grep playing) ]]; then echo musicicon; else echo nomusicicon; fi")

(deflisten workspace0 "scripts/workspace0")
(deflisten workspace1 "scripts/workspace1")
(deflisten volume_percent "scripts/volume")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; widgets

(defwidget workspaces0 [] (literal :content workspace0))
(defwidget workspaces1 [] (literal :content workspace1))

(defwidget volume []
    (eventbox
        :class "volume"
        :onscroll "wpctl set-volume @DEFAULT_AUDIO_SINK@ 1%$(echo {} | sed -e 's/down/-/g' -e 's/up/+/g')"
        :onclick "pavucontrol &"
        (box
            (label :class "volume_icon" :text "墳")
            (label :class "volume_text" :text "${volume_percent}%")
        )))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :tooltip "${music}"
       (button :class barplaypause :onclick "mpc toggle" " ")
           (label
           :limit-width 80
           :show_truncated true
           :text music)))

(defwidget cpu []
        (box
        :class "cpu_module"
        :vexpand "false"
        :hexpand "false"
        (circular-progress
            :value {EWW_CPU.avg}
            :class "cpubar"
            :thickness 3
            :start-at 75
            (button
                :onclick "kitty btop &"
                :class "iconcpu"
                :tooltip "using ${EWW_CPU.avg}% cpu"
                "●"))
            (label :class "cputext" :text "${round(EWW_CPU.avg,0)}%")))

(defwidget mem []
        (box
        :class "mem_module" 
        :vexpand "false" 
        :hexpand "false" 
        (circular-progress 
            :value {EWW_RAM.used_mem_perc}
            :class "membar"
            :thickness 3
            :start-at 75
            (button 
                :onclick "kitty htop &"
                :class "iconmem"
                :tooltip "using ${EWW_RAM.used_mem_perc}% ram"
                "●"))
            (label :class "memtext" :text "${round(EWW_RAM.used_mem_perc,0)}%")))

(defwidget clock_module []
  (eventbox
    :onclick "if ${EWW_CMD} windows | grep '^calendar' ; then ${EWW_CMD} open calendar ; else ${EWW_CMD} close calendar ; fi"
      (box
          :class "module"
          :space-evenly "false"
          :orientation "h"
          :spacing "0" 
          (label :class "clock_date_class" :text clock_date)
          (label :class "clock_time_class" :text clock_time))))
  
(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
        :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label :text ""))))
  
(defwidget sep []
  (box 
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
        :class "separ"
        :text "|")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; define bar config

(defwidget center []
    (box
     :orientation "h" 
     :space-evenly false
     :halign "center"
     :class "center_modules"
    (music)
    (sep)
    (volume)
    (sep)
    (cpu)
    (mem)
    (sep)
    (clock_module)
    (notif_button)
    ))

(defwidget bar_layout []
  (box
    :class "bar_class"
    :orientation "h"
    (center)
    ))

(defwindow bar0
    :monitor 0
    :geometry (geometry
        :x "0px"
        :y "0px"
        :width "0px"
        :height "0px"
        :anchor "bottom center")
    :stacking "fg"
    (bar))

(defwindow bar1
    :monitor 1
    :geometry (geometry
        :x "0px"
        :y "0px"
        :width "0px"
        :height "0px"
        :anchor "bottom center")
    :stacking "fg"
    (bar))

(defwidget bar []
    (eventbox
        (revealer
            :transition "slideup"
            :reveal bar
            :duration "150ms"
        (bar_layout))))
(defvar bar false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; workspace bar

(defwindow workspacebar0
    :monitor 0
    :geometry (geometry
        :x "0px"
        :y "0px"
        :width "0px"
        :height "0px"
        :anchor "top center")
    :stacking "fg"
    (workspaces0))

(defwindow workspacebar1
    :monitor 1
    :geometry (geometry
        :x "0px"
        :y "0px"
        :width "0px"
        :height "0px"
        :anchor "top center")
    :stacking "fg"
    (workspaces1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; calendar

(defwidget cal []
    (box
        :class "cal"
        :orientation "v"
        (box
            :class "cal-in"
            (calendar
                  :day calendar_day
                  :year calendar_year))))

(defwindow calendar
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
    :geometry (geometry
      :x "20"
      :y "20"
      :anchor "top right"
      :width "270px"
      :height "60px")
(cal))
